// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	entity "ecommerce/customer/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCustomer is a mock of Customer interface.
type MockCustomer struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerMockRecorder
}

// MockCustomerMockRecorder is the mock recorder for MockCustomer.
type MockCustomerMockRecorder struct {
	mock *MockCustomer
}

// NewMockCustomer creates a new mock instance.
func NewMockCustomer(ctrl *gomock.Controller) *MockCustomer {
	mock := &MockCustomer{ctrl: ctrl}
	mock.recorder = &MockCustomerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomer) EXPECT() *MockCustomerMockRecorder {
	return m.recorder
}

// Collection mocks base method.
func (m *MockCustomer) Collection(arg0 context.Context) ([]entity.Customer, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection", arg0)
	ret0, _ := ret[0].([]entity.Customer)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Collection indicates an expected call of Collection.
func (mr *MockCustomerMockRecorder) Collection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockCustomer)(nil).Collection), arg0)
}

// Create mocks base method.
func (m *MockCustomer) Create(arg0 context.Context, arg1 *entity.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCustomerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomer)(nil).Create), arg0, arg1)
}

// Get mocks base method.
func (m *MockCustomer) Get(ctx context.Context, id int64) (*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCustomerMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCustomer)(nil).Get), ctx, id)
}

// MockCustomerRepo is a mock of CustomerRepo interface.
type MockCustomerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepoMockRecorder
}

// MockCustomerRepoMockRecorder is the mock recorder for MockCustomerRepo.
type MockCustomerRepoMockRecorder struct {
	mock *MockCustomerRepo
}

// NewMockCustomerRepo creates a new mock instance.
func NewMockCustomerRepo(ctrl *gomock.Controller) *MockCustomerRepo {
	mock := &MockCustomerRepo{ctrl: ctrl}
	mock.recorder = &MockCustomerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepo) EXPECT() *MockCustomerRepoMockRecorder {
	return m.recorder
}

// CreateOne mocks base method.
func (m *MockCustomerRepo) CreateOne(arg0 context.Context, arg1 *entity.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOne", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOne indicates an expected call of CreateOne.
func (mr *MockCustomerRepoMockRecorder) CreateOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOne", reflect.TypeOf((*MockCustomerRepo)(nil).CreateOne), arg0, arg1)
}

// DeleteOne mocks base method.
func (m *MockCustomerRepo) DeleteOne(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockCustomerRepoMockRecorder) DeleteOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockCustomerRepo)(nil).DeleteOne), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockCustomerRepo) GetAll(arg0 context.Context, arg1 *int64) ([]entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].([]entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCustomerRepoMockRecorder) GetAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCustomerRepo)(nil).GetAll), arg0, arg1)
}

// GetOne mocks base method.
func (m *MockCustomerRepo) GetOne(arg0 context.Context, arg1 int64) (*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", arg0, arg1)
	ret0, _ := ret[0].(*entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockCustomerRepoMockRecorder) GetOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockCustomerRepo)(nil).GetOne), arg0, arg1)
}

// UpdateOne mocks base method.
func (m *MockCustomerRepo) UpdateOne(arg0 context.Context, arg1 *entity.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockCustomerRepoMockRecorder) UpdateOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockCustomerRepo)(nil).UpdateOne), arg0, arg1)
}

// MockCustomerWebAPI is a mock of CustomerWebAPI interface.
type MockCustomerWebAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerWebAPIMockRecorder
}

// MockCustomerWebAPIMockRecorder is the mock recorder for MockCustomerWebAPI.
type MockCustomerWebAPIMockRecorder struct {
	mock *MockCustomerWebAPI
}

// NewMockCustomerWebAPI creates a new mock instance.
func NewMockCustomerWebAPI(ctrl *gomock.Controller) *MockCustomerWebAPI {
	mock := &MockCustomerWebAPI{ctrl: ctrl}
	mock.recorder = &MockCustomerWebAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerWebAPI) EXPECT() *MockCustomerWebAPIMockRecorder {
	return m.recorder
}

// Translate mocks base method.
func (m *MockCustomerWebAPI) Translate(arg0 *entity.Customer) (*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Translate", arg0)
	ret0, _ := ret[0].(*entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Translate indicates an expected call of Translate.
func (mr *MockCustomerWebAPIMockRecorder) Translate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Translate", reflect.TypeOf((*MockCustomerWebAPI)(nil).Translate), arg0)
}
