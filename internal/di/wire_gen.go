// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"ecommerce/customer/config"
	grpc2 "ecommerce/customer/internal/delivery/grpc"
	"ecommerce/customer/internal/delivery/http"
	"ecommerce/customer/internal/repository"
	"ecommerce/customer/internal/usecase"
	"ecommerce/customer/pkg/grpcserver"
	"ecommerce/customer/pkg/httpserver"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/uchin-mentorship/ecommerce-go/customer"
	"google.golang.org/grpc"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"log"
)

// Injectors from wire.go:

func InitializeHttpServer() (*httpserver.Server, func(), error) {
	engine := gin.New()
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, nil, err
	}
	db, cleanup, err := provideGormDB(configConfig)
	if err != nil {
		return nil, nil, err
	}
	customerRepo := provideCustomerRepo(db)
	customer := provideCustomerUseCase(customerRepo)
	router := http.NewRouter(engine, customer)
	server := provideHttpServer(router, engine, configConfig)
	return server, func() {
		cleanup()
	}, nil
}

func InitializeGRPCServer() (*grpcserver.GRPCServer, func(), error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, nil, err
	}
	v := provideGRPCServerOptions()
	server := grpc.NewServer(v...)
	db, cleanup, err := provideGormDB(configConfig)
	if err != nil {
		return nil, nil, err
	}
	customerRepo := provideCustomerRepo(db)
	customer := provideCustomerUseCase(customerRepo)
	customerServiceServer := provideGRPCCustomerService(customer)
	grpcServer := provideGRPCServer(configConfig, server, customerServiceServer)
	return grpcServer, func() {
		cleanup()
	}, nil
}

// wire.go:

var useCaseSet = wire.NewSet(config.NewConfig, provideGormDB, provideCustomerUseCase, provideCustomerRepo)

func provideGRPCCustomerService(u usecase.Customer) customer.CustomerServiceServer {
	return grpc2.NewCustomerService(u)
}

func provideGRPCServerOptions() []grpc.ServerOption {
	return nil
}

func provideGRPCServer(cfg *config.Config, server *grpc.Server, delivery customer.CustomerServiceServer) *grpcserver.GRPCServer {
	customer.RegisterCustomerServiceServer(server, delivery)
	return grpcserver.New(server, cfg.GRPC.Address)
}

func provideCustomerRepo(db *gorm.DB) usecase.CustomerRepo {
	return repository.New(db)
}

func provideCustomerUseCase(r usecase.CustomerRepo) usecase.Customer {
	return usecase.NewCustomer(r)
}

func provideGormDB(cfg *config.Config) (*gorm.DB, func(), error) {
	db, err := gorm.Open(postgres.Open(cfg.PG.URL), &gorm.Config{})
	if err != nil {
		return nil, nil, err
	}
	return db, func() {
		conn, err := db.DB()
		if err != nil {
			log.Printf("failed to get db connection, %v", err)
			return
		}
		conn.Close()
	}, nil
}

func provideHttpServer(router *http.Router, handler *gin.Engine, cfg *config.Config) *httpserver.Server {
	router.Register()
	return httpserver.New(handler, httpserver.Port(cfg.HTTP.Port))
}
